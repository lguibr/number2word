name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ui-code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install UI dependencies
        run: |
          cd ui
          npm install
      - name: UI Lint Check
        run: |
          cd ui
          npm run lintfix

  build-ui:
    needs: ui-code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install UI dependencies
        run: |
          cd ui
          npm install
      - name: Generate static files
        run: |
          cd ui
          npm run generate
      - name: Upload public directory as artifact
        uses: actions/upload-artifact@v3
        with:
          name: public-directory
          path: ./ui/.output/public

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/dev.txt
      - name: Run backend code checks
        run: |
          cd backend
          mypy --config-file ./mypy.ini .
          flake8 .
          isort --settings-path ./pyproject.toml --check-only .
          black --check .

  tests:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/dev.txt
      - name: Run backend tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cd backend
          python manage.py test

  docker-push:
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: lguibr/django-trellis-example:latest

  cdk-diff:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v3
      - name: Download public directory
        uses: actions/download-artifact@v3
        with:
          name: public-directory
          path: ./ui/.output/public
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: CDK diff
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        run: |
          cd infra
          npm ci
          npx cdk diff InfraStack

  cdk-ui-diff:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-ui]
    steps:
      - uses: actions/checkout@v3
      - name: Download public directory
        uses: actions/download-artifact@v3
        with:
          name: public-directory
          path: ./ui/.output/public
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: CDK diff
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        run: |
          cd infra
          npm ci
          npx cdk diff UiAppDeploymentStack

  cdk-deploy:
    needs: [docker-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download public directory
        uses: actions/download-artifact@v3
        with:
          name: public-directory
          path: ./ui/.output/public
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: Deploy with CDK
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        run: |
          cd infra
          npm ci
          npx cdk deploy --require-approval never InfraStack

  cdk-deploy-ui:
    needs: [build-ui]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download public directory
        uses: actions/download-artifact@v3
        with:
          name: public-directory
          path: ./ui/.output/public
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_UI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_UI_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Install CDK
        run: npm install -g aws-cdk
      - name: Deploy with CDK
        env:
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
        run: |
          cd infra
          npm ci
          npx cdk deploy --require-approval never UiAppDeploymentStack
